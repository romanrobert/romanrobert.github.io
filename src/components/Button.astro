---
const {type="button", variant="primary", icon = null, href=null, target="_self"} = Astro.props;
---

<a
  type={type}
  class={`btn ${variant} ${icon ? 'btn-with-icon' : ''}`}
  href={href}
  target={target}
>
{icon && <span class="btn-icon" set:html={icon}></span>}
<span class="btn-bg"></span>
  <slot />
</a>




<style>

a {
  --easing: cubic-bezier(0.65, 0.05, 0.36, 1);
  --neutral-light: #eeeeee;
  --neutral-dark: #171717;
  
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-direction: row-reverse;
  position: relative;
  overflow: hidden;
  padding: 0.5rem 1rem;
  border-radius: 100vw;
  text-align: center;
  text-decoration: none;
  font-family: inherit;
  font-weight: 500;
  color: white;
  border: 1px solid white;
  transition: color 0.5s var(--easing); /* Adding transition to the color change */
}

a .btn-bg {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background-color: var(--neutral-light);
  transform: translate(-50%, -50%);
  z-index: -1;
  transition: width 0.5s var(--easing), height 0.5s var(--easing);
}

a:hover {
  color: var(--neutral-dark);
}

a:hover .btn-bg {
  width: 225%;
  height: 562.5px;
}

a:active {
  background-color: var(--neutral-dark);
  color: var(--neutral-light);
}
    
</style>


<script>
  (() => {
  const buttons = document.querySelectorAll(".btn");

  buttons.forEach(button => {
    ["mouseenter", "mouseout"].forEach(evt => {
      button.addEventListener(evt, e => {
        const parentOffset = button.getBoundingClientRect(),
              relX = e.pageX - parentOffset.left,
              relY = e.pageY - parentOffset.top;

        const span = button.querySelector("span");

        if (span) {
          span.style.top = `${relY}px`;
          span.style.left = `${relX}px`;
        }
      });
    });
  });
})();



</script>